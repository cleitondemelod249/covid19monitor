{"version":3,"sources":["virus_PNG22.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","startInterval","setInterval","axios","get","state","url","then","res","info","data","lastUpdt","Date","setState","cases","todayCases","deaths","todayDeaths","critical","recovered","run","upd","country","this","console","log","setStateToLoad","v","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","onClick","Container","fluid","Row","Col","md","src","logo","alt","Table","responsive","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9c2081c2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/virus_PNG22.a88a7c23.png\";","import React from 'react';\nimport logo from './virus_PNG22.png';\nimport axios from 'axios';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { Container, Row, Col, Table, Nav, Navbar } from 'react-bootstrap';\n\nexport default class App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      run: false,\n      cases: '',\n      todayCases: '',\n      deaths: '',\n      todayDeaths: '',\n      critical: '',\n      recovered: '',\n      upd: '',\n      url: 'https://coronavirus-19-api.herokuapp.com/countries/brazil',\n      country: 'Loading...'\n    };\n  }\n\n  startInterval = () => {\n    setInterval(() => {\n      axios.get(this.state.url)\n        .then(res => {\n          let info = res.data;\n          let lastUpdt = new Date() + '';\n          this.setState({ cases: info.cases, todayCases: info.todayCases, deaths: info.deaths, todayDeaths: info.todayDeaths, critical: info.critical, recovered: info.recovered, run: true, upd: lastUpdt, country: info.country })\n          //console.log(info);\n        });\n    }, 3000);\n  }\n\n  render() {\n    //console.log(this.state.run);\n    this.state.run !== false ? console.log() : this.startInterval();\n\n    var setStateToLoad = (v) => {\n      this.setState({ url: 'https://coronavirus-19-api.herokuapp.com/countries/' + v });\n      this.setState({ cases: '', todayCases: '', deaths: '', todayDeaths: '', critical: '', recovered: '', run: true, country: 'Loading...' });\n    }\n\n    return (\n      <div>\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand href=\"#home\">Covid19Monitor</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n          <Navbar.Collapse id=\"responsive-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <Nav.Link onClick={() => setStateToLoad('brazil')}>Brazil</Nav.Link>\n              <Nav.Link onClick={() => setStateToLoad('usa')}>USA</Nav.Link>\n              <Nav.Link onClick={() => setStateToLoad('italy')}>Italia</Nav.Link>\n              <Nav.Link onClick={() => setStateToLoad('china')}>China</Nav.Link>\n              <Nav.Link onClick={() => setStateToLoad('russia')}>Russia</Nav.Link>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n\n        <Container fluid>\n\n          <Row>\n            <Col md={12}>\n              <div>\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                <p>\n                  <code>COVID-19 Status Monitor. # {this.state.country} #</code>\n                </p>\n\n                <Table responsive>\n                  <thead>\n                    <tr>\n                      <th>country</th>\n                      <th>Confirmed</th>\n                      <th>Confirmed Today</th>\n                      <th>Deaths</th>\n                      <th>Deaths Today</th>\n                      <th>Critical Cases</th>\n                      <th>Total Recovered</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <td>{this.state.country}</td>\n                      <td>{this.state.cases ? this.state.cases : '0'}</td>\n                      <td>{this.state.cases ? this.state.todayCases : '0'}</td>\n                      <td>{this.state.cases ? this.state.deaths : '0'}</td>\n                      <td>{this.state.cases ? this.state.todayDeaths : '0'}</td>\n                      <td>{this.state.cases ? this.state.critical : '0'}</td>\n                      <td>{this.state.cases ? this.state.recovered : '0'}</td>\n                    </tr>\n                  </tbody>\n                </Table>\n\n                <p>Last Update: {this.state.upd ? this.state.upd : new Date() + ''}</p>\n              </div>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}